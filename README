Fluid Nexus v0.1 alpha

Nicholas A. Knouf
http://fluidnexus.net
fluidnexus@fluidnexus.net

This software is ALPHA QUALITY and should only be used at your own risk.  More detailed instructions about theory, motivation, installation, and use can be found on the website.

The software has been testing on Ubuntu Maverick with python 2.6.6 and requires the following python modules: pyqt4, pybonjour, sqlalchemy, textile, pybluez, protobuf (version 2.3.0 or higher).

Specific network modality notes:

Bluetooth:
* Should run without modification on Windows if pybluez is installed, but this hasn't been tested
* Will not run on OS X due to lack of pybluez; the networking code will have to be ported to lightblue

Zeroconf:
* Should run without modification on Windows if pybonjour is installed, along with the Bonjour library from Apple; this has not been tested
* Should run without modification on OS X if pybonjour is installed; this has not been tested
* Linux will require the installation of a avahi-bonjour compatability library; on ubuntu this is libavahi-compat-libdnssd1.

To run, type "./FluidNexus.py"; for help, type "./FluidNexus.py --help".

The Nokia Series 60 port is on hold for the moment; archived code can be found in the "S60" directory.

= SECURITY NOTE =

Data is stored unencrypted in a local sqlite database.  It is best that you take care of encryption yourself, such as by using ecryptfs home directories or LUKS encrypted devices on Linux.

Data is sent over bluetooth without any transport layer encryption.  This is something we plan on implementing in the future.

Data is sent over link-local wifi using zeroconf for service discovery without any transport layer encryption.  This is something we plan on implementing in the future.

= TODO =

* Fix TextBrowser size in GUI
* * Almost there...still off by a bit
* Shutdown server/client threads properly on GUI exist
* Present dialog instead of status message if bluetooth, zeroconf are not enabled
* Start server/client threads in headless version; shutdown properly by catching interrupts
* Implement ad-hoc wifi
* Implement SSL/TLS over the network modalities
